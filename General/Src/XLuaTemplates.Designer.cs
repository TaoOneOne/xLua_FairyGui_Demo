//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace XLuaGenerate.Src {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class XLuaTemplates {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal XLuaTemplates() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("XLuaGenerate.Src.XLuaTemplates", typeof(XLuaTemplates).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #if USE_UNI_LUA
        ///using LuaAPI = UniLua.Lua;
        ///using RealStatePtr = UniLua.ILuaState;
        ///using LuaCSFunction = UniLua.CSharpFunctionDelegate;
        ///#else
        ///using LuaAPI = XLua.LuaDLL.Lua;
        ///using RealStatePtr = System.IntPtr;
        ///using LuaCSFunction = XLua.LuaDLL.lua_CSFunction;
        ///#endif
        ///
        ///using XLua;
        ///using System.Collections.Generic;
        ///&lt;%ForEachCsList(namespaces, function(namespace)%&gt;using &lt;%=namespace%&gt;;&lt;%end)%&gt;
        ///&lt;%
        ///require &quot;TemplateCommon&quot;
        ///
        ///local OpNameMap = {op_Addition = &quot;__AddMeta&quot;, op_Subtraction = &quot;__SubMeta&quot;, [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LuaClassWrap_tpl {
            get {
                return ResourceManager.GetString("LuaClassWrap_tpl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #if USE_UNI_LUA
        ///using LuaAPI = UniLua.Lua;
        ///using RealStatePtr = UniLua.ILuaState;
        ///using LuaCSFunction = UniLua.CSharpFunctionDelegate;
        ///#else
        ///using LuaAPI = XLua.LuaDLL.Lua;
        ///using RealStatePtr = System.IntPtr;
        ///using LuaCSFunction = XLua.LuaDLL.lua_CSFunction;
        ///#endif
        ///
        ///using System;
        ///&lt;%
        ///require &quot;TemplateCommon&quot;
        ///%&gt;
        ///
        ///namespace XLua
        ///{
        ///    public partial class DelegateBridge : DelegateBridgeBase
        ///    {
        ///		&lt;%
        ///		ForEachCsList(delegates_groups, function(delegates_group, group_idx)
        ///		local delegate = [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LuaDelegateBridge_tpl {
            get {
                return ResourceManager.GetString("LuaDelegateBridge_tpl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #if USE_UNI_LUA
        ///using LuaAPI = UniLua.Lua;
        ///using RealStatePtr = UniLua.ILuaState;
        ///using LuaCSFunction = UniLua.CSharpFunctionDelegate;
        ///#else
        ///using LuaAPI = XLua.LuaDLL.Lua;
        ///using RealStatePtr = System.IntPtr;
        ///using LuaCSFunction = XLua.LuaDLL.lua_CSFunction;
        ///#endif
        ///
        ///using XLua;
        ///using System.Collections.Generic;
        ///&lt;%
        ///require &quot;TemplateCommon&quot;
        ///
        ///local parameters = delegate:GetParameters()
        ///local in_num = CalcCsList(parameters, function(p) return p.IsIn or not p.IsOut end)
        ///local out_num = CalcCsLis [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LuaDelegateWrap_tpl {
            get {
                return ResourceManager.GetString("LuaDelegateWrap_tpl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #if USE_UNI_LUA
        ///using LuaAPI = UniLua.Lua;
        ///using RealStatePtr = UniLua.ILuaState;
        ///using LuaCSFunction = UniLua.CSharpFunctionDelegate;
        ///#else
        ///using LuaAPI = XLua.LuaDLL.Lua;
        ///using RealStatePtr = System.IntPtr;
        ///using LuaCSFunction = XLua.LuaDLL.lua_CSFunction;
        ///#endif
        ///
        ///using XLua;
        ///using System.Collections.Generic;
        ///&lt;%
        ///require &quot;TemplateCommon&quot;
        ///%&gt;
        ///
        ///namespace XLua.CSObjectWrap
        ///{
        ///    using Utils = XLua.Utils;
        ///    &lt;%ForEachCsList(types, function(type)
        ///	local fields = g_enum_get_fields_flag and ty [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LuaEnumWrap_tpl {
            get {
                return ResourceManager.GetString("LuaEnumWrap_tpl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #if USE_UNI_LUA
        ///using LuaAPI = UniLua.Lua;
        ///using RealStatePtr = UniLua.ILuaState;
        ///using LuaCSFunction = UniLua.CSharpFunctionDelegate;
        ///#else
        ///using LuaAPI = XLua.LuaDLL.Lua;
        ///using RealStatePtr = System.IntPtr;
        ///using LuaCSFunction = XLua.LuaDLL.lua_CSFunction;
        ///#endif
        ///
        ///using XLua;
        ///using System;
        ///&lt;%
        ///require &quot;TemplateCommon&quot;
        ///
        ///%&gt;
        ///
        ///namespace XLua.CSObjectWrap
        ///{
        ///    public class &lt;%=CSVariableName(type)%&gt;Bridge : LuaBase, &lt;%=CsFullTypeName(type)%&gt;
        ///    {
        ///	    public static LuaBase __Create(int ref [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LuaInterfaceBridge_tpl {
            get {
                return ResourceManager.GetString("LuaInterfaceBridge_tpl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #if USE_UNI_LUA
        ///using LuaAPI = UniLua.Lua;
        ///using RealStatePtr = UniLua.ILuaState;
        ///using LuaCSFunction = UniLua.CSharpFunctionDelegate;
        ///#else
        ///using LuaAPI = XLua.LuaDLL.Lua;
        ///using RealStatePtr = System.IntPtr;
        ///using LuaCSFunction = XLua.LuaDLL.lua_CSFunction;
        ///#endif
        ///
        ///using System;
        ///using System.Collections.Generic;
        ///using System.Reflection;
        ///&lt;%
        ///require &quot;TemplateCommon&quot;
        ///%&gt;
        ///
        ///namespace XLua.CSObjectWrap
        ///{
        ///    public class XLua_Gen_Initer_Register__
        ///	{
        ///	    static XLua_Gen_Initer_Register__()
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LuaRegister_tpl {
            get {
                return ResourceManager.GetString("LuaRegister_tpl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #if USE_UNI_LUA
        ///using LuaAPI = UniLua.Lua;
        ///using RealStatePtr = UniLua.ILuaState;
        ///using LuaCSFunction = UniLua.CSharpFunctionDelegate;
        ///#else
        ///using LuaAPI = XLua.LuaDLL.Lua;
        ///using RealStatePtr = System.IntPtr;
        ///using LuaCSFunction = XLua.LuaDLL.lua_CSFunction;
        ///#endif
        ///
        ///using System;
        ///&lt;%
        ///require &quot;TemplateCommon&quot;
        ///%&gt;
        ///
        ///namespace XLua
        ///{
        ///    public partial class ObjectTranslator
        ///    {
        ///        &lt;%if purevaluetypes.Count &gt; 0 then
        ///        local init_class_name = &quot;IniterAdder&quot; .. CSVariableName(pureval [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string LuaWrapPusher_tpl {
            get {
                return ResourceManager.GetString("LuaWrapPusher_tpl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #if USE_UNI_LUA
        ///using LuaAPI = UniLua.Lua;
        ///using RealStatePtr = UniLua.ILuaState;
        ///using LuaCSFunction = UniLua.CSharpFunctionDelegate;
        ///#else
        ///using LuaAPI = XLua.LuaDLL.Lua;
        ///using RealStatePtr = System.IntPtr;
        ///using LuaCSFunction = XLua.LuaDLL.lua_CSFunction;
        ///#endif
        ///
        ///using System;
        ///&lt;%
        ///require &quot;TemplateCommon&quot;
        ///%&gt;
        ///
        ///namespace XLua
        ///{
        ///    public static partial class CopyByValue
        ///    {
        ///        &lt;%ForEachCsList(type_infos, function(type_info)
        ///        local full_type_name = CsFullTypeName(type_info. [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PackUnpack_tpl {
            get {
                return ResourceManager.GetString("PackUnpack_tpl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to -- Tencent is pleased to support the open source community by making xLua available.
        ///-- Copyright (C) 2016 THL A29 Limited, a Tencent company. All rights reserved.
        ///-- Licensed under the MIT License (the &quot;License&quot;); you may not use this file except in compliance with the License. You may obtain a copy of the License at
        ///-- http://opensource.org/licenses/MIT
        ///-- Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &quot;AS IS&quot; BASIS, WITHOUT WARRA [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string TemplateCommon_lua {
            get {
                return ResourceManager.GetString("TemplateCommon_lua", resourceCulture);
            }
        }
    }
}
